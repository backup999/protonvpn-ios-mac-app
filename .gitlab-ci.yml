stages:
  - prepare
  - i18n
  - github
  - trigger

##
## ---- Variables
##

variables:
  ATLAS_DEPLOY_ENV: "true"
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  # We use this variable when we run publish-github jobs
  RELEASE_GITHUB_REPOSITORY: git@github.com:ProtonVPN/ios-mac-app.git
  # Folder where jobs put their output like build binaries, test results, etc.
  JOBS_OUTPUT_PATH: "output"
  # Default tart settings
  TART_EXECUTOR_ALWAYS_PULL: "false"
  TART_EXECUTOR_HEADLESS: "false"
  DESCRIBE_DIR: "apple-vpn-ci"
  PIPELINE_TEMPLATE: "gitlab-pipeline.yml"
  IMAGES: $IMAGES

default:
  image: "team-vpn-macos-14.6.1-xcode-15.4"

# Only start a pipeline if it's for a merge request, if the pipeline has been scheduled, if this is a merge result onto
# the develop branch, or if this is a tag which begins with a recognized tag prefix like `mac` or `ios`.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" ||
          $CI_PIPELINE_SOURCE == "schedule" ||
          $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ||
          $CI_COMMIT_TAG =~ /mac|ios|tv\/\d+/ ||
          $CI_COMMIT_BRANCH == "jkb/feat/VPNAPPL-1507-new-ci"
include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  # Generate a dynamic pipeline for each build train (platform) we support. This pipeline is based off of the template
  # at Integration/Templates/gitlab-pipeline.yml, and builds, tests, and publishes all necessary artifacts.
  #
  # Jobs that do not require running multiple times for each build train should remain in .gitlab-ci.yml.
  # - component: gitlab.protontech.ch/proton/devops/cicd-components/community/git-lhc/describe (not in the catalog yet)
  - project: 'proton/devops/cicd-components/community/git-lhc'
    file: templates/describe.yml
    ref: 0.8.0-alpha.10
    inputs:
      output_directory: apple-vpn-ci
      cmd_prefix: "mint run "
      templates: "pages.docc fastlane $PIPELINE_TEMPLATE slack-message.txt sparkle-item.xml"
      trains: "ios mac tv"

##
## ---- Job templates shamefully stolen from Integration/Templates/gitlab-pipeline.yml
##

.job_template:
  before_script:
    - Integration/Scripts/pipeline_setup.sh

.mint_cache:
  variables:
    MINT_PATH: $CI_PROJECT_DIR/.caches/mint
    MINT_LINK_PATH: $MINT_PATH/bin
    MINT_CACHE_POLICY: pull-push
  cache:
    - key: mint-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - mint-$CI_DEFAULT_BRANCH
      paths:
        - $MINT_PATH
      policy: $MINT_CACHE_POLICY

##
## ---- Translations
##

# Jobs come from the generator inside gitlab translations/generator
# Config for the project itself (i18n config) is inside translations/config-app
i18n-crowdin-upload:
  stage: i18n
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'apple-vpn'
  extends: .i18n-sync-crowdin-shared-apple

i18n-crowdin-download:
  stage: i18n
  variables:
      I18N_COMMIT_CROWDIN_PROJECT: 'apple-vpn'
  extends: .i18n-commit-locales-shared-apple

i18n-tv-upload:
  stage: i18n
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'apple-vpn-tv'
  extends: .i18n-sync-crowdin-shared-apple

i18n-tv-download:
  stage: i18n
  variables:
      I18N_COMMIT_CROWDIN_PROJECT: 'apple-vpn-tv'
  extends: .i18n-commit-locales-shared-apple

##
## ---- Linting/pipeline generation
##

# Lint the project, then generate the pipeline.
prepare:
  extends:
    - .job_template
    - .mint_cache
  variables:
    GIT_DEPTH: 200
    GIT_SUBMODULE_STRATEGY: none
  stage: prepare
  tags:
    - vpn-apple-xs
  before_script:
    - !reference [.job_template, before_script]
    - !reference [.lhc_describe, before_script]
  script:
    - |
      # Lint commits, code quality, and translations on branches only (not tags)
      if [ -z "$CI_COMMIT_TAG" ]; then
          mint run git-lhc lint --verbose --train ios # Lint commit history
          Integration/Scripts/code_quality.sh # Lint code quality
          Integration/Scripts/lint_translations.sh # Lint string files
      fi
    - !reference [.lhc_describe, script] # Generate child pipelines
  artifacts:
    expire_in: 5 days
    paths:
      - apple-vpn-ci/*/*
      - codequality_report.json
    reports:
      codequality: codequality_report.json

##
## ---- Trigger dynamic pipelines
##

# If a tag was pushed, then only one pipeline was created. Otherwise, LHC generated one pipeline for each build train,
# and we need to trigger each one in a matrix.

# Trigger the pipeline generated by the describe job, for one or all trains as necessary.
.trigger_template:
  stage: trigger
  variables:
    # For tagging commits with the pipeline id
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    # For fetching job artifacts (avoids a bug [!366870] in Gitlab dependencies)
    PARENT_JOB_ID: $CI_JOB_ID
  trigger:
    strategy: depend
    forward:
      pipeline_variables: true
      yaml_variables: true

.trigger_deploy:
  stage: deploy
  strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID

trigger:tag:
  extends:
    - .trigger_template
  trigger:
    include:
      - artifact: "$DESCRIBE_DIR/release/$PIPELINE_TEMPLATE"
        job: prepare
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never

trigger:branch:
  extends:
    - .trigger_template
  parallel:
    matrix:
      - TRAIN: [ios, mac, tv]
  trigger:
    include:
      - artifact: "$DESCRIBE_DIR/$TRAIN/$PIPELINE_TEMPLATE"
        job: prepare
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success

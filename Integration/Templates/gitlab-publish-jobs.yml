{% extends "gitlab-publish-job.base.yml" %}{# Default publish template #}

{% block publish_header %}
  extends:
    - .job_template
    - .mint_cache_template
  {% if not config.distribution.sparkle %}{# Sparkle deploy environment is set in artifactlift jobs #}
  environment:
    # Certain environments, like beta and production, require approval for distribution.
    name: {{ config.releaseChannel }}
    url: $RELEASE_PAGE_URL
  {% endif %}
{% endblock %}

{% block publish_tags %}
  - vpn-apple-metal
  - $PIPELINE_HOST
{% endblock %}

{% block publish_needs %}
{{ block.super }}
{%- if config.distribution.sparkle %}
{% if channel == "alpha" %}
    - job: '{% block build_job_name %}build:{{ config.name }}:all{% endblock %}'
      parallel:
        matrix:
          - TARGET: app
            CONFIGURATION: Release # We need the binary so that we can generate a signature
{% else %}
    - job: "artifactlift-release-artifacts"
{% endif %}
{% endif %}
{% endblock %}

{% block publish_app_configurations %}{{ config.build.userProperties.appConfigurations }}{% endblock %}

{% block pages_header %}
  extends:
    - .job_template
{% endblock %}

{% block publish_rules %}
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: manual
      allow_failure: true
{% endblock %}

{% block publish_artifacts %}
{%- if config.distribution.sparkle -%}
    paths:
      {% if channel == "alpha" %}
      # Publish creates the sparkle signature from the binary, which gets passed on to artifactlift-release-candidate-artifacts.
      - {{ config.build.outputDirectory }}/Release/sparkle.signature
      {% else %}
      # Publish uses the signature from the alpha build and the publicly-available sparkle feed to generate a new sparkle xml file.
      - {{ config.build.outputDirectory }}/Release/sparkle.xml
      {% endif %}
{% endif %}
{% endblock %}

{% block publish_footer %}
{% if config.distribution.sparkle %}
{%
    if (config.releaseChannel == "alpha" and config.build.ci.tagName) or
       config.build.ci.refName == config.userProperties.releaseBranch
%}
{# Modify each of the Nexus release upload jobs - notice the "for" #}
{% for configuration in config.build.userProperties.appConfigurations|split:"," %}
{%- if configuration == "Staging" -%}{# Add prefix to the job #}
staging-
{%- endif -%}
artifactlift-release-candidate-artifacts:
  variables:
    GIT_STRATEGY: none
  {% if configuration == "Release" %}
  environment:
    # Certain environments, like beta and production, require approval for distribution.
    name: {{ config.releaseChannel }}
    url: $RELEASE_PAGE_URL
  {% endif %}
  rules: # Always run release uploads for tags, merges can be manual
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: manual
      allow_failure: true
  needs: # Make sure we get the artifacts from the build job.
    - job: "build:{{ config.name }}:all"
      parallel:
        matrix:
          - TARGET: app
            CONFIGURATION: {{ configuration }}
    {% if configuration == "Release" %}
    - job: "publish:{{ config.name }}:app" # Publish job contains sparkle signature.
    {% endif %}
{% endfor %}
{% elif config.build.ci.tagName and target|attrs:config.trailers.releasePipeline %}
{# Modify the Nexus release promotion jobs #}
artifactlift-release-artifacts:
  needs: # Require the parent artifacts for the sparkle template
    - pipeline: $PARENT_PIPELINE_ID
      job: 'prepare'
  variables:
    # We don't need to clone the repo, since this job operates on artifacts only.
    GIT_STRATEGY: none
    # Use the timestamp so we can re-use binaries for build promotion later on if necessary.
    AL_NEXUS_DOWNLOAD_DIRECTORY: macos/{{ short_version }}+{% include "timestamp.base" %}
    # Upload the binary based on the version.
    AL_S3_UPLOAD_DIRECTORY: "macos/{{ version }}"
    # Where to save the files locally (after cd'ing into $artifact_local_directory)
    AL_ROOT_DIRECTORY: .
  environment:
    # Certain environments, like beta and production, require approval for distribution.
    name: {{ config.releaseChannel }}
    url: $RELEASE_PAGE_URL
  artifacts:
    paths:
      # Pass this on to the publish step, which in turn passes it on to the -metadata job.
      - artifacts/sparkle.signature

artifactlift-release-metadata:
  variables:
    GIT_STRATEGY: none
    # Where to save the files locally (after cd'ing into $artifact_local_directory)
    AL_ROOT_DIRECTORY: .
  needs:
    # For the sparkle files
    - job: publish:{{ config.name }}:app
{% endif %}
{% endif %}

{% if config.build.ci.tagName %}{# Only available for tag pushes #}
publish:gitlab:release:
  stage: publish
  tags:
    - shared-small
  allow_failure: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script: |
  {% if channel == "production" %}
    echo "Creating release {{ train }} {{ short_version }}..."
  {% else %}
    # Update the release contents in Jira using webhook automations.
    # PROJECT_IDS is a bunch of task IDs separated by one (or more) spaces.
    PROJECT_IDS='
        {%- for category, changes in release.changes -%}
            {%- for change in changes -%}{{ change.projectIds|join:" " }} {%+ endfor -%}
        {%- endfor -%}
    '

    # Clean up the above array using `sed` by replacing one or more spaces with commas, and trimming the comma at
    # the beginning/end, if it exists. (This is difficult to do with templates alone, since you don't know what the last
    # element is in the list that contains a non-empty projectIds array.)
    JSON_PROJECT_IDS=$(echo "$PROJECT_IDS" | sed 's/  */,/g' | sed 's/,$//' | sed 's/^,//')

    echo "Updating tasks in Jira..."
    curl -X POST -H 'Content-type: application/json' \
        --data "{\"releaseName\":\"{{ train }} {{ short_version }}\",\"issues\":[$JSON_PROJECT_IDS]}" \
    {% if channel == "alpha" %}
        "$JIRA_NEW_RELEASE_WEBHOOK" \
    {% elif channel == "beta" %}
        "$JIRA_SHIP_RELEASE_WEBHOOK" \
    {% endif %}
        || true # Allow failure if it doesn't succeed, people can update tasks manually.
  {% endif %}
  needs:
    # In case the environment deploy requires approval
    - job: publish:{{ config.name }}:app
  release:
    name: "{{ train }} {{ version }} ($TIMESTAMP)"
    tag_name: $CI_COMMIT_TAG
    {% if release.body %}
    description: |
      {{ release.body|indent:6 }}
    {% endif %}
    assets:
      links:
        - name: "Release Page"
          url: $RELEASE_PAGE_URL
        {% if config.distribution.sparkle %}
        - name: "Release Build"
          url: "{{ config.distribution.sparkle.userProperties.internalDownloadUrl }}/repository/vpn-release-candidates/macos/{{ short_version }}+$TIMESTAMP/ProtonVPN_mac_v{{ short_version }}.dmg"
        - name: "Staging Build"
          url: "{{ config.distribution.sparkle.userProperties.internalDownloadUrl }}/repository/vpn-release-candidates/macos/{{ short_version }}+$TIMESTAMP.staging/ProtonVPN_mac_v{{ short_version }}.dmg"
        {% endif %}

{% if config.releaseChannel == "production" %}
.release_mirror_template:
  stage: publish
  variables:
    RELEASE_SYNC_TO_BRANCH: "{{ config.userProperties.releaseBranch }}"
    RELEASE_SYNC_FROM_BRANCH: "{{ config.userProperties.releaseBranch }}"
  only:
    refs:
      - tags

publish:github:commits:
  extends:
    - .release-sync-commit-shared
    - .release_mirror_template

publish:github:tag:
  extends:
    - .release-sync-tags-shared
    - .github_mirror_template
{% endif %}
{% endif %}

{% endblock %}

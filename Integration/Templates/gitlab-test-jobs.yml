{% extends "gitlab-test-job.base.yml" %} {# Default test template #}

{% block test_job_name %}.test_job_template{% endblock %}
{% block testplan_name %}{{ config.build.productName }}-{{ config.build.platform }}-$TEST_SUITE{% endblock %}

{% block test_tags %}
    - vpn-{{ config.build.platform|lowercase }}-tests
    - $PIPELINE_HOST
{% endblock %}

{% block test_vars %}
{{ block.super }}
    GIT_DEPTH: 1
    GIT_SUBMODULE_STRATEGY: none
    DERIVED_DATA_CACHE_POLICY: pull
    MINT_CACHE_POLICY: pull
    TEST_SUITE: Unit-All
{% endblock %}

{% block test_header %}
  extends:
    - .job_template
    - .build_cache_template
{% endblock %}

{#
 # For merge results, all tests are manual.
 # Merge requests run unit and UI smoke tests.
 # Scheduled/web pipelines run unit and full UI tests.
 #}
{% block test_rules %}
{% if config.build.ci.eventType == "merge_request_event" and config.build.ci.refName != config.userProperties.releaseBranch %}
    - if: $TEST_SUITE == "UI-All"
      when: manual
      allow_failure: true
    - when: on_success
{% elif config.build.ci.eventType == "schedule" or config.build.ci.eventType == "web" %}
    - if: $TEST_SUITE == "UI-Smoke"
      when: manual
      allow_failure: true
    - when: on_success
{% else %}
    - when: manual
      allow_failure: true
{% endif %}
{% endblock %}

{% block test_footer %}

# Unit tests run automatically on every job, provided the upstream pipelines (e.g. builds) are run.
test:{{ config.name }}:unit:
  extends:
    - .test_job_template
  stage: test
  variables:
    TEST_SUITE: Unit-All

# Modify the env deployment job:
# - Depend on the success of the build job, and make sure it's successful.
# - Make sure that deploy jobs in multiple child pipelines don't collide.
# - Even after all of this, if it still fails, retry the job once.
atlas:deploy:pipenv:
  variables:
      GIT_STRATEGY: fetch
      GIT_DEPTH: 1
      GIT_SUBMODULE_STRATEGY: none
      # Lock namespace is per-branch to avoid contention across the project.
      LOCKREF: "refs/notes/proton/envs/$CI_COMMIT_REF_SLUG"
      # Trailer value is unique to this deploy job, to help identify us in the queue.
      TRAILER: "Queued-Atlas-Deploy: $CI_JOB_ID"
  retry:
    max: 1
    when:
      - script_failure
      - unknown_failure
  before_script:
    - |
      git config --global --add safe.directory "$PWD"
      rm .git/hooks/pre-push
      git remote set-url origin https://oauth:$PIPELINE_ACCESS_TOKEN@${CI_PROJECT_URL:8}
      git config --local user.email $GIT_CI_EMAIL
      git config --local user.name $GIT_CI_USERNAME
    - ./Integration/Scripts/deploy_lock.sh lock "$LOCKREF" "$TRAILER"
  after_script:
    - ./Integration/Scripts/deploy_lock.sh unlock "$LOCKREF" "$TRAILER"
    # Add the atlas secret to the dotenv file
    - echo "ATLAS_SECRET=$(curl -q "$ATLAS_TOKEN_URL")" >> deploy.env
    - source deploy.env
    - CI_JOB_STARTED_AT_TS=$(date -d "$CI_JOB_STARTED_AT" "+%s000")
    - CI_JOB_ENDED_AT_TS=$(date "+%s000")
    - GRAFANA_BASE_URL="https://grafana.$ATLAS_URL/d/pCwJa01Iz2/environments-overview-with-pods-failures-history"
    - GRAFANA_URL="$GRAFANA_BASE_URL?orgId=1&var-environment=env-$ENV_NAME&from=$CI_JOB_STARTED_AT_TS&to=$CI_JOB_ENDED_AT_TS"
    - echo -e "\e[35;1mYou can check your environment status and logs at:\n$GRAFANA_URL\e[0;m"
    - |
      echo '{"atlas-environment": [
        {"external_link": {"label": "Open env '$ENV_NAME' (Login)", "url": "https://account.$ENV_NAME.$ATLAS_URL"}},
        {"external_link": {"label": "Open env Dashboard (Grafana)", "url": "https://grafana.$ATLAS_URL/d/pCwJa01Iz2/environments-overview-with-pods-failures-history?orgId=1&vvar-environment=env-'$ENV_NAME'&from='$CI_JOB_STARTED_AT_TS'&to='$CI_JOB_ENDED_AT_TS'"}}
      ]}' > annotations.json
  needs:
    - job: build:{{ config.name }}:all
      artifacts: false
      parallel:
        matrix:
          - TARGET: tests
            CONFIGURATION: Debug
            DESTINATION: Default

  rules:
{% if config.build.ci.eventType == "merge_request_event" or config.build.ci.eventType == "schedule" %}
    - when: on_success
{% else %}
    - when: manual
      allow_failure: true
{% endif %}

.ui_test_template:
  extends:
    - .test_job_template
  stage: test_ui
  needs:
    - !reference [.test_job_template, needs]
    - job: 'atlas:deploy:pipenv' # Make sure env gets deployed before starting UI tests

# Smoke UI tests run for all merge request events, including merged results.
test:{{ config.name }}:ui:smoke:
  stage: test_ui
  variables:
    TEST_SUITE: UI-Smoke
  extends:
    - .ui_test_template
  rules:
{% if config.build.ci.eventType == "merge_request_event" %}
    - when: on_success
{% else %}
    - when: manual
      allow_failure: true
{% endif %}

# UI tests run automatically on scheduled pipelines only.
test:{{ config.name }}:ui:all:
  stage: test_ui
  variables:
    TEST_SUITE: UI-All
  extends:
    - .ui_test_template
  {% if config.build.ci.eventType == "schedule" %}
  when: on_success
  {% else %}
  when: manual
  {% endif %}

{% endblock %}

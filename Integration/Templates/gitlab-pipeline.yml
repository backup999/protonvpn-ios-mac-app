#{#
# This is a template for dynamically generating a Gitlab pipeline configuration for a release train and channel.
# It is meant to be used alongside the fastlane template to create dynamic pipelines for each train, according to git
# history and the .lhc configuration file.
#}{% if true %}
# This file is automatically generated. Do not edit it.
#{% endif %}

workflow:
  name: "{{ config.build.productName }} {{ config.build.platform }} {{ release.versionString }} ($TIMESTAMP)"
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

stages:
  - build
  - publish
  - test
  - deploy
  - test_ui
  - cleanup

variables:
  PIPELINE_HOST: "ci-vilnius-1" # {{ "ci-vilnius-1,ci-vilnius-2,ci-vilnius-2"|split:","|random }}
  # Use parallel compression/decompression to speed up caching
  FF_USE_FASTZIP: "true"
  # Low-effort compression to reduce bandwidth spent uploading/downloading, with some parallelism for speed
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  # We don't care about size of the caches since they're stored locally, just the time spent to zip/unzip them
  CACHE_COMPRESSION_LEVEL: "fastest"
  # Increase the timeout for resolving build settings
  FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 300
  # Unique timestamp according to the commit and pipeline ID
  TIMESTAMP: "{% include "timestamp.base" %}"
  # Exportable configurations available for building the app
  APP_CONFIGURATIONS: {%+ block app_configurations %}{{ config.build.userProperties.appConfigurations }}{% endblock +%}
  BUILD_HOST_IDENTIFIER: "macos-{{ config.build.userProperties.platformVersion }}-xcode-{{ config.build.userProperties.toolchainVersion }}"
{% if config.distribution.sparkle %}
  SPARKLE_XML_FILE: "sparkle.xml"
  APPCAST_URL: "https://protonvpn.com/download/macos-update3.xml"
{% endif %}

default:
  image: "team-vpn-$BUILD_HOST_IDENTIFIER"

include:
  - project: 'proton/devops/atlas-deploy'
    ref: main
    file: '/scenarios/pipeline-env.yml'
{%- if config.distribution.sparkle -%}
{%-
    if config.build.ci.eventType == "merge_request_event" and
    config.build.ci.refName == config.userProperties.releaseBranch
-%}{# Include the Nexus release upload jobs #}
{% for configuration in block.app_configurations|split:"," %}
  - component: "gitlab.protontech.ch/proton/devops/cicd-components/tools/artifactlift/release-candidate@0.1.13"
    inputs:
      stage: publish
      product: vpn
      version: "{{ short_version }}+{% include "timestamp" %}"
      platform: macos
      artifact_list: "ProtonVPN_mac_v{{ short_version }}.dmg sparkle.signature"
      artifact_local_directory: output/mac/{{ configuration }}
      {% if configuration == "Staging" %}
      job_prefix: staging-
      {% endif %}
{% endfor %}
{% elif config.build.ci.tagName -%}{# Include the Nexus release promotion jobs #}
  - component: "gitlab.protontech.ch/proton/devops/cicd-components/tools/artifactlift/release@0.1.13"
    inputs:
      stage: publish
      product: vpn
      version: "{{ release.versionString }}"
      platform: macos
      artifact_list: "ProtonVPN_mac_v{{ short_version }}.dmg sparkle.signature"
      artifact_metadata_list: "../public/$SPARKLE_XML_FILE"
      artifact_metadata_path: "macos/updates/v4"
      artifact_local_directory: artifacts
{% endif %}
{% endif +%}

# BUILD CACHES
##############
# Caches for DerivedData, fetched SPM packages, and Mint build dependencies
.derived_data_cache_template:
  variables: &derived_data_cache_variables
    DERIVED_DATA_PATH: .caches/Xcode/DerivedData
    DERIVED_DATA_CACHE_POLICY: pull-push
    TRAIN_CACHE_KEY: "{{ config.build.platform }}-host-$BUILD_HOST_IDENTIFIER"
  cache: &derived_data_cache_cache
    - key: build-$TRAIN_CACHE_KEY-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - build-$TRAIN_CACHE_KEY-{{ config.userProperties.releaseBranch }}
        - build-$TRAIN_CACHE_KEY-$CI_DEFAULT_BRANCH
      paths:
        - $DERIVED_DATA_PATH
      policy: $DERIVED_DATA_CACHE_POLICY

.mint_cache_template:
  variables: &mint_cache_variables
    MINT_PATH: $CI_PROJECT_DIR/.caches/mint
    MINT_LINK_PATH: $MINT_PATH/bin
    MINT_CACHE_POLICY: pull-push
  cache: &mint_cache_cache
    - key: mint-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - mint-host-$BUILD_HOST_IDENTIFIER-{{ config.userProperties.releaseBranch }}
        - mint-host-$BUILD_HOST_IDENTIFIER-$CI_DEFAULT_BRANCH
      paths:
        - $MINT_CACHE_PATH
      policy: $MINT_CACHE_POLICY

.build_cache_template:
  variables:
    <<: *derived_data_cache_variables
    <<: *mint_cache_variables
  cache:
    - *derived_data_cache_cache
    - *mint_cache_cache

# cache policies
# publish fastlane variables
# publish sparkle job
# metal executor & parallelism
# xcode select

# JOB TEMPLATE
##############
# All jobs in this file extend this template.
.job_template:
  variables:
    # Tart mounts the host volume at /Volumes/My Shared Files, which breaks both Mint and GNU Make thanks to the space
    # in the filename. We create a symlink to our builddir so they can continue pretending that spaces don't exist.
    ARTIFACTS_DIR: "{{ config.build.outputDirectory }}/$CONFIGURATION"
  before_script:
    - ./Integration/Scripts/pipeline_setup.sh
  after_script: |
    # Delete all ssh private keys
    ssh-add -D
  interruptible: true

# BUILD STEP
############
# Creates app artifacts for shipping, and test bundles for running tests.
{% if channel == "alpha" or config.build.ci.eventType == "merge_request_event" %}
{% include "gitlab-build-job.yml" %}
{% endif %}

{% if config.build.ci.tagName or config.build.ci.refName == config.userProperties.releaseBranch %}
# PUBLISH STEP
##############
# Sends app binaries to the correct place, according to the release channel.
{% include "gitlab-publish-jobs.yml" %}
{% endif %}

# TEST STEP
###########
# Runs unit and partial/full UI tests depending on the context.
{% if channel == "alpha" %}
{% include "gitlab-test-jobs.yml" %}
{% endif %}

# ANNOUNCE STEP
##############
# Runs jobs announcing new builds and/or pipeline failures.
{% if config.build.ci.eventType != "merge_request_event" %}
{% include "gitlab-announce-jobs.yml" %}
{% endif %}
